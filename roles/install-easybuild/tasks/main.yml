---
- name: Create required directories.
  file:
    path:  "{{item}}"
    state: 'directory'
    mode: "{{ MODE_2775_HARD }}"
  with_items:
    - "{{ easybuild_sources_dir }}/l/Lmod"
    - "{{ easybuild_sources_dir }}/l/Lua"
    - "{{ easybuild_sources_dir }}/e/EasyBuild/{{ easybuild_eb_version }}"
    - "{{ easybuild_software_dir }}/Lua/{{ easybuild_lua_version }}"
    - "{{ easybuild_software_dir }}/EasyBuild/"
    - "{{ easybuild_modules_dir }}/all/EasyBuild"
    - "{{ easybuild_modules_dir }}/tools/EasyBuild"
    - "{{ easybuild_modules_dir }}/.lmod"
    - "{{ HPC_ENV_PREFIX }}/.tmp"

#
# Update environment.
#
- name: Create global modules.bashrc with Lmod and EasyBuild environment config.
  template: src="{{ item.src }}" dest="{{ easybuild_modules_dir }}/{{ item.dest }}" mode="{{ MODE_0664_HARD }}"
  with_items:
    - src: 'lmodrc.lua'
      dest: '.lmod/lmodrc.lua'
    - src: 'modules.bashrc'
      dest: 'modules.bashrc'
- name: Insert/update block into ~/.bashrc to make sure modules.bashrc will be sourced.
  blockinfile:
    dest: "{{ ansible_env.HOME }}/.bashrc"
    block: |
      if [ -f "{{ easybuild_modules_dir }}/modules.bashrc" ]; then
        source "{{ easybuild_modules_dir }}/modules.bashrc"
      fi
    marker: "# {mark} ANSIBLE MANAGED BLOCK - Setup environment for Lua, Lmod & EasyBuild."
    insertafter: EOF
    create: yes

#
# Lua.
#
- name: Check if Lua is installed and if yes what version.
  #
  # Example output:
  # Lua 5.1.4.7-rtm  Copyright (C) 1994-2008 Lua.org, PUC-Rio
  #
  shell: |
         unset MODULEPATH
         source {{ easybuild_modules_dir }}/modules.bashrc >/dev/null 2>&1
         lua -v  2>&1 | grep -i Lua | sed 's|^.*Lua \([0-9\.]*\).*$|\1|'
  args:
    executable: /bin/bash
    warn: no
  environment:
    SOURCE_HPC_ENV: "True"   # Required to source our modules.bashrc in non-interactive shells.
  changed_when: false
  failed_when: false
  check_mode: no
  register: lua_installed_version 
- name: Report Lua status.
  debug:
    #msg: 'Will install Lua from source as it is either missing or present in a different version. (Detected {{ lua_installed_version.stderr | regex_replace("^.*Lua ([0-9\.]+).*$", "\\1") }} and need {{ easybuild_lua_version }}.)'
    msg: 'Will install Lua from source as it is either missing or present in a different version. (Detected {{ lua_installed_version.stdout }} and need {{ easybuild_lua_version }}.)'
  when:         'lua_installed_version is failed or lua_installed_version.stdout != easybuild_lua_version'
  changed_when: 'lua_installed_version is failed or lua_installed_version.stdout != easybuild_lua_version'
  notify: 'Install_Lua'
- name: Flush handlers to trigger Lua installation.
  meta: flush_handlers

#
# Lmod.
#
# Check if a system-wide Lmod is installed from an RPM and give up when we do find one.
# A system-wide Lmod is usally installed in /usr/share/lmod/ and will clash with a custom one,
# due to its symlinks/files in /etc/profile.d/ This will always get sourced when a new bash shell is started
# resulting in re-overriding your custom LMOD_CMD env var setting it to:
#     LMOD_CMD=/usr/share/lmod/lmod/libexec/lmod
# This results in a different Lmod binary getting used when colling "module load ..." from within a bash script,
# which may initially go unnoticed when differences between the two Lmod version are small,
# but it will cause a fatal crash when one Lmod is for example a 6.x version and the other a 7.x,
# because the Lmod cache file syntax has changed in 7.x.
#
- name: Check if a system-wide Lmod is installed from an RPM, which will clash with a custom Lmod.
  find:
    paths: '/etc/profile.d/'
    patterns: '*lmod*'
    recurse: yes
    hidden: yes
    follow: yes
    file_type: any
  register: lmod_profile_files
- name: Report error when conflicting Lmod init files are found in /etc/profile.d/.
  fail:
    msg: "Error: found conflicting Lmod profile file in {{ item }}. Please remove the OS supplied Lmod version."
  when: 'lmod_profile_files is success'
  with_items: "{{ lmod_profile_files | json_query('files[].path') | list }}"

- name: Check if Lmod is installed and if yes what version.
  #
  # Example output:
  # Modules based on Lua: Version 6.5.8  2016-09-03 13:41 -05:00 (CDT)
  #    by Robert McLay mclay@tacc.utexas.edu
  #
  shell: |
         unset MODULEPATH
         source {{ easybuild_modules_dir }}/modules.bashrc >/dev/null 2>&1
         lmod -v 2>&1 | sed '/^$/d' | sed 's|^.*Version \([0-9\.]*\).*$|\1|' | head -1
  args:
    executable: /bin/bash
    warn: no
  environment:
    SOURCE_HPC_ENV: "True"   # Required to source our modules.bashrc in non-interactive shells.
  changed_when: false
  failed_when: false
  check_mode: no
  register: lmod_installed_version
- name: "DEBUG: Report Lmod status."
  debug:
    msg: 'Detected {{ lmod_installed_version.stdout }} and need {{ easybuild_lmod_version }}.'
- name: Report Lmod status.
  debug:
    msg: 'Will install Lmod from source as it is either missing or present in a different version. (Detected {{ lmod_installed_version.stdout }} and need {{ easybuild_lmod_version }}.)'
  when:         'lmod_installed_version is failed or lmod_installed_version.stdout != easybuild_lmod_version'
  changed_when: 'lmod_installed_version is failed or lmod_installed_version.stdout != easybuild_lmod_version'
  notify: 'Install_Lmod'
- name: Flush handlers to trigger Lmod installation.
  meta: flush_handlers

#
# EasyBuild.
#
- name: Check if EasyBuild is installed and if yes what version.
  shell: |
         source {{ easybuild_modules_dir }}/modules.bashrc >/dev/null 2>&1
         module load EasyBuild/{{ easybuild_eb_version }}
         eb --version 2>&1 | sed 's|^This is EasyBuild \([0-9\.]*\).*$|\1|'
  args:
    executable: /bin/bash
    warn: no
  environment:
    SOURCE_HPC_ENV: "True"   # Required to source our modules.bashrc in non-interactive shells.
  changed_when: false
  failed_when: false
  check_mode: no
  register: eb_installed_version
#- name: DEBUG EasyBuild version number.
#  debug:
#    msg: 'Detected {{ eb_installed_version.stdout | version_compare(easybuild_eb_version, operator="!=") }}.'
#- debug: var=eb_installed_version
- name: Report EasyBuild status.
  debug:
    msg: 'Will bootstrap the latest EasyBuild version from source as it is either missing or present in a different version. (Detected {{ eb_installed_version.stdout }} and need {{ easybuild_eb_version }}.)'
  when:         'eb_installed_version is failed or eb_installed_version.stdout != easybuild_eb_version'
  changed_when: 'eb_installed_version is failed or eb_installed_version.stdout != easybuild_eb_version'
  notify: 'Install_EasyBuild'
- name: Flush handlers to trigger EasyBuild installation.
  meta: flush_handlers
...
